/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void rightButtonClicked()
    {
        // Override and implement this function in Main
    }

    virtual void leftButtonClicked()
    {
        // Override and implement this function in Main
    }

    virtual void buttonUpClicked()
    {
        // Override and implement this function in Main
    }

    virtual void buttonStartClicked()
    {
        // Override and implement this function in Main
    }

    virtual void buttonPauseClicked()
    {
        // Override and implement this function in Main
    }

    virtual void buttonRunClicked()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image background;
    touchgfx::Image imageGreyCenter;
    touchgfx::Image bottombar;
    touchgfx::Image topbar;
    touchgfx::Image imageWhiteCenter;
    touchgfx::Image leftShade;
    touchgfx::MoveAnimator< touchgfx::Button > leftButton;
    touchgfx::Image rightShade;
    touchgfx::MoveAnimator< touchgfx::Button > rightButton;
    touchgfx::Button buttonInstructions;
    touchgfx::Button buttonAbout;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > textAreaProgramName;
    touchgfx::FadeAnimator< touchgfx::TextArea > textAreaDash;
    touchgfx::FadeAnimator< touchgfx::TextAreaWithOneWildcard > textAreaProgramLength;
    touchgfx::Button buttonUp;
    touchgfx::FadeAnimator< touchgfx::Image > imageRPM;
    touchgfx::FadeAnimator< touchgfx::Image > imageHeat;
    touchgfx::FadeAnimator< touchgfx::Image > imageLevel;
    touchgfx::FadeAnimator< touchgfx::Image > imageOption1;
    touchgfx::FadeAnimator< touchgfx::Image > imageOption2;
    touchgfx::FadeAnimator< touchgfx::Image > imageOption3;
    touchgfx::FadeAnimator< touchgfx::Button > buttonStart;
    touchgfx::FadeAnimator< touchgfx::Button > buttonPause;
    touchgfx::FadeAnimator< touchgfx::Button > buttonRun;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREAPROGRAMNAME_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textAreaProgramNameBuffer[TEXTAREAPROGRAMNAME_SIZE];
    static const uint16_t TEXTAREAPROGRAMLENGTH_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textAreaProgramLengthBuffer[TEXTAREAPROGRAMLENGTH_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MAINVIEWBASE_HPP
